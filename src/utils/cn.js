export function cn(...classes) {
  return classes.filter(Boolean).join(" ");
}

// ğŸ“Œ Metin iÅŸlemleri

/**
 * Verilen metni tamamen bÃ¼yÃ¼k harfe Ã§evirir.
 * @param {string} text
 * @returns {string}
 */
export function toUpper(text) {
  return String(text).toUpperCase();
}

/**
 * Verilen metni tamamen kÃ¼Ã§Ã¼k harfe Ã§evirir.
 * @param {string} text
 * @returns {string}
 */
export function toLower(text) {
  return String(text).toLowerCase();
}

/**
 * Ä°lk harfi bÃ¼yÃ¼k, diÄŸer harfleri kÃ¼Ã§Ã¼k yapar.
 * @param {string} text
 * @returns {string}
 */
export function capitalize(text) {
  return (
    String(text).charAt(0).toUpperCase() + String(text).slice(1).toLowerCase()
  );
}

/**
 * TÃ¼m kelimelerin baÅŸ harfini bÃ¼yÃ¼tÃ¼r.
 * @param {string} text
 * @returns {string}
 */
export function titleCase(text) {
  return String(text)
    .toLowerCase()
    .split(" ")
    .map((word) => capitalize(word))
    .join(" ");
}

/**
 * Metni ters Ã§evirir.
 * @param {string} text
 * @returns {string}
 */
export function reverseText(text) {
  return String(text).split("").reverse().join("");
}

/**
 * Verilen metni URL iÃ§in uygun hale getirir. (slug)
 * @param {string} text
 * @returns {string}
 */
export function slugify(text) {
  return String(text)
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, "")
    .replace(/\s+/g, "-");
}

/**
 * Metni belirtilen uzunlukta keser, sonuna "..." gibi ek getirir.
 * @param {string} text
 * @param {number} length
 * @param {string} suffix
 * @returns {string}
 */
export function truncate(text, length = 100, suffix = "...") {
  return text.length > length ? text.substring(0, length) + suffix : text;
}

// ğŸ“Œ SayÄ± ve Para formatlama

/**
 * Para birimini formatlar. VarsayÄ±lan olarak TÃ¼rk LirasÄ± (TRY).
 * @param {number} amount
 * @param {string} locale
 * @param {string} currency
 * @returns {string}
 */
export function formatCurrency(amount, locale = "tr-TR", currency = "TRY") {
  return new Intl.NumberFormat(locale, {
    style: "currency",
    currency,
  }).format(amount);
}

/**
 * Binlik ayÄ±rÄ±cÄ±larla sayÄ± formatlar. Ã–rn: 1.000.000
 * @param {number} value
 * @param {string} locale
 * @returns {string}
 */
export function formatNumber(value, locale = "tr-TR") {
  return new Intl.NumberFormat(locale).format(value);
}

// ğŸ“Œ DiÄŸer YardÄ±mcÄ± Fonksiyonlar

/**
 * Boolean deÄŸerini "Evet" / "HayÄ±r" olarak Ã§evirir.
 * @param {boolean} value
 * @returns {string}
 */
export function booleanToText(value) {
  return value ? "Evet" : "HayÄ±r";
}

/**
 * Tarihi belirtilen formatta dÃ¶ndÃ¼rÃ¼r. (Ã¶rneÄŸin: 03 Temmuz 2025)
 * @param {Date|string} date
 * @param {string} locale
 * @returns {string}
 */
export function formatDate(date, locale = "tr-TR") {
  return new Date(date).toLocaleDateString(locale, {
    day: "2-digit",
    month: "long",
    year: "numeric",
  });
}

/**
 * Verilen metnin baÅŸÄ±na emoji ekler.
 * @param {string} emoji
 * @param {string} text
 * @returns {string}
 */
export function addEmoji(emoji, text) {
  return `${emoji} ${text}`;
}

/**
 * RakamÄ± yazÄ±ya dÃ¶ker. (1 => "Bir", 2 => "Ä°ki")
 * Basit Ã¶rnek, geniÅŸletilebilir.
 * @param {number} num
 * @returns {string}
 */
export function numberToText(num) {
  const map = [
    "SÄ±fÄ±r",
    "Bir",
    "Ä°ki",
    "ÃœÃ§",
    "DÃ¶rt",
    "BeÅŸ",
    "AltÄ±",
    "Yedi",
    "Sekiz",
    "Dokuz",
  ];
  return map[num] || num.toString();
}
